#!/usr/bin/env python3
# This is a script that I use for programming contests.
# Commands:
#   zz: Run main.cc or main.py (if main.cc does not exist) on samp_input.txt and pipe to stdout.
#   zz f: Run main.cc or main.py on input.txt and pipe to output.txt.
#   zz ic: Initialize directory with a template main.cc file.
#   zz ip: Initialize directory with a template main.py file.

import os
import pathlib
import shutil
import subprocess
import sys

def main():
  if len(sys.argv) == 1:
    return run_samp()
  if len(sys.argv) != 2:
    print('Usage error')
    return 1
  cmd = sys.argv[1]
  if cmd == 'f':
    return run_final()
  if cmd == 'ic':
    return init_cc()
  if cmd == 'ip':
    return init_py()
  print('Usage error')
  return 1


def run_samp():
  return run('samp_input.txt')


def run_final():
  return run('input.txt', 'output.txt')


def run(inf_path, outf_path=None):
  if outf_path is None:
    outf_path = '/dev/stdout'
  if os.path.exists('main.cc'):
    return run_cc(inf_path, outf_path)
  else:
    return run_py(inf_path, outf_path)


def run_cc(inf_path, outf_path):
  if subprocess.call(['g++', '-g', 'main.cc']):
    return 1
  with open(inf_path) as inf, open(outf_path, 'w') as outf:
    return subprocess.call(['./a.out'], stdin=inf, stdout=outf)


def run_py(inf_path, outf_path):
  with open(inf_path) as inf, open(outf_path, 'w') as outf:
    return subprocess.call(['./main.py'], stdin=inf, stdout=outf)


def find_skeldir(name):
  p = pathlib.Path('.').resolve()
  while p != pathlib.Path(p.root):
    for elem in p.iterdir():
      if not elem.is_dir():
        continue
      if elem.name == name:
        return elem
    p = p.parent

  print(f'Could not find {name} directory!', file=sys.stderr)

  return None


def init_cc():
  skeldir = find_skeldir('skel_cc')
  if skeldir is None:
    return 1
  shutil.copy(skeldir / 'main.cc', 'main.cc')
  return 0


def init_py():
  skeldir = find_skeldir('skel_py')
  if skeldir is None:
    return 1
  shutil.copy(skeldir / 'main.py', 'main.py')
  return 0


if __name__ == '__main__':
  exit(main())
