#!/usr/bin/env python3
# This is a script that I use for programming contests.
# Commands:
#   zz: Run main.cc or main.py (if main.cc does not exist) on in.txt and pipe to stdout.
#   zz f: Run main.cc or main.py on input.txt and pipe to output.txt.
#   zz d: Like zz, but debug mode.
#   zz ic: Initialize directory with a template main.cc file.
#   zz ip: Initialize directory with a template main.py file.
#   zz lib: Used for adding libraries to source file.

import collections
import os
import pathlib
import platform
import shutil
import subprocess
import sys


SUBMISSION_FILE = '/tmp/zz_submission.txt'

def gpp_bin():
  if platform.system() == 'Darwin':
    return '/usr/local/Cellar/gcc/9.1.0/bin/g++-9'
  else:
    return 'g++'


def main():
  if len(sys.argv) == 1:
    return run([])
  cmd = sys.argv[1]
  if cmd == 'f':
    return run(sys.argv[2:], sample=False)
  if cmd == 'd':
    return run(sys.argv[2:], debug=True)
  if cmd == 'ic':
    return init_cc()
  if cmd == 'ip':
    return init_py()
  if cmd == 'iip':
    return init_code_jam_interactive_py()
  if cmd == 'lib':
    return add_libs(sys.argv[2:])
  print('Usage error')
  return 1


def run(args, sample=True, debug=False):
  inf_path = 'in.txt' if sample else 'input.txt'
  outf_path = '/dev/stdout' if sample else 'output.txt'
  if os.path.exists('main.cc'):
    return run_cc(inf_path, outf_path, debug=debug)
  elif os.path.exists('test.sh'):
    return run_code_jam_interactive_py(args)
  else:
    return run_py(inf_path, outf_path, debug=debug)


def run_cc(inf_path, outf_path, debug=False):
  cc_cmd = [gpp_bin(), '--std=c++17', '-pthread']
  if debug:
    cc_cmd += ['-g', '-rdynamic', '-x', 'c++', '-DKERRICK_DEBUG', '-']
    with open('main.cc') as f:
      stdindata = BACKTRACE_CC_CODE + f.read()
  else:
    cc_cmd += ['-O3', 'main.cc']
    stdindata = ''
  proc = subprocess.Popen(cc_cmd, stdin=subprocess.PIPE)
  proc.communicate(stdindata.encode('utf-8'))
  if proc.wait():
    return 1
  with open(inf_path) as inf, open(outf_path, 'w') as outf:
    ret = subprocess.call(['./a.out'], stdin=inf, stdout=outf)
    if ret == 0:
      shutil.copy('main.cc', SUBMISSION_FILE)
    else:
      pathlib.Path(SUBMISSION_FILE).unlink(missing_ok=True)


def run_py(inf_path, outf_path, debug=False):
  with open(inf_path) as inf, open(outf_path, 'w') as outf:
    ret = subprocess.call(['./main.py'], stdin=inf, stdout=outf)
    if ret == 0:
      shutil.copy('main.py', SUBMISSION_FILE)
    else:
      pathlib.Path(SUBMISSION_FILE).unlink(missing_ok=True)
    return ret



def run_code_jam_interactive_py(args):
  if args:
    problem_set = int(args[0])
  else:
    problem_set = 1
  return subprocess.call(['./test.sh', str(problem_set)])


def find_skeldir(name):
  p = pathlib.Path('.').resolve()
  while p != pathlib.Path(p.root):
    for elem in p.iterdir():
      if not elem.is_dir():
        continue
      if elem.name == name:
        return elem
    p = p.parent

  print('Could not find {} directory!'.format(name), file=sys.stderr)

  return None


def init_cc():
  skeldir = find_skeldir('skel_cc')
  if skeldir is None:
    return 1
  shutil.copy(str(skeldir / 'main.cc'), 'main.cc')
  return 0


def init_py():
  skeldir = find_skeldir('skel_py')
  if skeldir is None:
    return 1
  shutil.copy(str(skeldir / 'main.py'), 'main.py')
  return 0


def init_code_jam_interactive_py():
  skeldir = find_skeldir('skel_code_jam_interactive_py')
  if skeldir is None:
    return 1
  shutil.copy(str(skeldir / 'main.py'), 'main.py')
  shutil.copy(str(skeldir / 'test.sh'), 'test.sh')
  return 0


BACKTRACE_CC_CODE = r'''
#include <stdio.h>
#include <execinfo.h>
#include <signal.h>
#include <stdlib.h>
#include <unistd.h>
#include <cxxabi.h>

void handler(int sig) {
  void *array[10];
  size_t size;

  fprintf(stderr, "Error: signal %d:\n", sig);

  // get void*'s for all entries on the stack
  size = backtrace(array, 10);

  // get string representations of stack frames
  char** symbols = backtrace_symbols(array, size);

  // print out symbols, demangling as we go
  const int mangled_size = 1000;
  char mangled[mangled_size];
  for (int i = 0; i < size; i++) {
    bool in_mangled = false;
    int mangled_idx = 0;
    for (char* c = symbols[i]; *c; c++) {
      if (in_mangled) {
        if (*c == '+') {
          in_mangled = false;
          mangled[mangled_idx] = 0;
          mangled_idx = 0;  // reset this just in case
          int status;
          char* demangled = abi::__cxa_demangle(mangled, nullptr, nullptr, &status);

          if (status == -2) {
            // no symbol, or a C symbol
            fputs(mangled, stderr);
          } else if (status != 0) {
            fprintf(stderr, "Error demangling string %s! Status was %d. Aborting...\n",  mangled, status);
            exit(1);
          } else {
            fputs(demangled, stderr);
          }
          free(demangled);
        } else {
          mangled[mangled_idx++] = *c;
        }
      }
      if (!in_mangled) {
        fputc(*c, stderr);
        if (*c == '(') {
          in_mangled = true;
        }
      }
    }
    fputc('\n', stderr);
  }

  // backtrace_symbols_fd(array, size, STDERR_FILENO);
  exit(1);
}

int install_handlers() {
  signal(SIGSEGV, handler);
  signal(SIGABRT, handler);
  return 0;
}

int _unused = install_handlers();
'''


class Lib:
  def __init__(self, name, contents, deps):
    self.name = name
    self.contents = contents
    self.deps = deps
  
  @classmethod
  def _libs_dir(cls):
    return 
  
  @classmethod
  def read(cls, name):
    git_root = subprocess.check_output(['git', 'rev-parse', '--show-toplevel']).decode('utf-8').strip()
    fpath = os.path.join(git_root, 'libs_cc', name + '.cc')

    with open(fpath) as f:
      contents = f.read()

    lines = contents.splitlines(True)
    if lines[0].startswith('// DEPS:'):
      deps = lines[0].split(':')[1].split()
      lines = lines[1:]
    else:
      deps = []
    
    return cls(name, ''.join(lines), deps)


def add_libs(lib_list):
  # check which libs are already present
  existing_libs = set()
  with open('main.cc') as f:
    lines = f.read().splitlines()
  for line in lines:
    line = line.strip()
    if line.startswith('// LIB '):
      existing_libs.add(line.split()[-1])

  # load libs
  loaded = {}
  to_load = collections.deque(lib_list)
  while to_load:
    lib_name = to_load.popleft()
    if lib_name in loaded:
      continue
    loaded[lib_name] = Lib.read(lib_name)
    to_load.extend(loaded[lib_name].deps)

  out_pieces = []

  # topo sort
  parents = {}
  deps_needed = {}
  for lib in loaded.values():
    deps_needed[lib.name] = set(lib.deps)
    for dep in lib.deps:
      parents.setdefault(dep, [])
      parents[dep].append(lib.name)
  frontier = set()
  for k, v in deps_needed.items():
    if not v:
      frontier.add(k)
  while frontier:
    lib_name = frontier.pop()
    if lib_name not in existing_libs:
      out_pieces.append('// LIB {}\n{}\n'.format(lib_name, loaded[lib_name].contents))
    for parent in parents.get(lib_name, []):
      deps_needed[parent].remove(lib_name)
      if not deps_needed[parent]:
        frontier.add(parent)
  if not all(not s for s in deps_needed.values()):
    raise RuntimeError('Circular dependency in libs!')
  
  # inject output into main.cc right before the line "// END LIBS"
  with open('main.cc') as f:
    lines = f.read().splitlines(True)
  for idx, line in enumerate(lines):
    if line.strip() == '// END LIBS':
      break
  lines[idx:idx] = out_pieces

  with open('main.cc', 'w') as f:
    f.write(''.join(lines))
  

if __name__ == '__main__':
  exit(main())
